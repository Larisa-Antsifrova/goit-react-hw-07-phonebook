{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Section/Section.module.css","components/PageTitle/PageTitle.module.css","components/Title/Title.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts-actions.js","redux/contacts-reducers.js","redux/store.js","components/Section/Section.js","components/PageTitle/PageTitle.js","components/Title/Title.js","redux/contacts-operations.js","redux/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateFilter","items","createReducer","_","payload","state","filter","contact","id","loading","phonebookReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","devTools","process","Section","children","className","styles","container","PageTitle","title","defaultProps","Title","axios","defaults","baseURL","getFilterValue","getAllContacts","getFilteredItems","createSelector","name","number","toLowerCase","includes","toLocaleLowerCase","getLoading","ContactForm","handleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","submitHandler","existingContact","find","alert","trim","reset","form","onSubmit","this","type","onChange","required","btn","Component","connect","dispatch","a","post","data","addContact","Filter","filterValue","filterUpdate","autoComplete","target","ContactList","fetchContacts","filtered","onDeleteContact","isLoading","loaderConfig","color","height","width","loader","isEmpty","map","item","onClick","notification","contactId","delete","deleteContact","get","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd06ad06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2ahVv\",\"btn\":\"ContactForm_btn__3b8Va\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1Bv93\",\"title\":\"Section_title__35_iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageTitle_title__3X38u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__3bNfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1GWZd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3OCwo\",\"item\":\"ContactList_item__90-fC\",\"btn\":\"ContactList_btn__2utXO\",\"notification\":\"ContactList_notification__AaEi9\",\"loader\":\"ContactList_loader__MLcMV\"};","// Imports from Redux Toolkit\nimport { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nconst fetchContactsError = createAction('contacts/fetchContactsError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst updateFilter = createAction('phonebook/updateFilter');\n\nexport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  updateFilter,\n};\n","// Imports from Redux\nimport { combineReducers } from 'redux';\n// Imports from Redux Toolkit\nimport { createReducer } from '@reduxjs/toolkit';\n// Imports of actions\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  updateFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [updateFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport const phonebookReducer = combineReducers({\n  items,\n  filter,\n  loading,\n});\n","// Imports from Redux Toolkit\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// Imports of middleware\nimport logger from 'redux-logger';\n// Imports of reducers\nimport { phonebookReducer } from './contacts-reducers';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    contacts: phonebookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport { store };\n","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './Section.module.css';\n\nconst Section = ({ children }) => {\n  return (\n    <section>\n      <div className={styles.container}>{children}</div>\n    </section>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './PageTitle.module.css';\n\nconst PageTitle = ({ title }) => {\n  return title && <h1 className={styles.title}>{title}</h1>;\n};\n\nPageTitle.defaultProps = {\n  title: '',\n};\n\nPageTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default PageTitle;\n","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './Title.module.css';\n\nconst Title = ({ title }) => {\n  return title && <h2 className={styles.title}>{title}</h2>;\n};\n\nTitle.defaultProps = {\n  title: '',\n};\n\nTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Title;\n","// Imports of actions\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n// Imports of libraries\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\nexport { fetchContacts, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilterValue = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\nconst getFilteredItems = createSelector(\n  [getAllContacts, getFilterValue],\n  (items, filter) =>\n    items.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filter.toLocaleLowerCase()) ||\n        number.includes(filter),\n    ),\n);\n\nconst getLoading = state => state.contacts.loading;\n\nexport { getFilterValue, getAllContacts, getFilteredItems, getLoading };\n","// Imports from React\nimport React, { Component } from 'react';\n// Imports from Redux\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts-operations';\nimport { getAllContacts } from '../../redux/contacts-selectors';\n// Helpers imports\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = { name: '', number: '' };\n\n  static propTypes = {\n    submitHandler: PropTypes.func.isRequired,\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = this.state;\n    const { items, submitHandler } = this.props;\n\n    if (!name) {\n      return;\n    }\n\n    const existingContact = items.find(contact => contact.name === name);\n\n    if (existingContact) {\n      alert(`${existingContact.name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = { name: name.trim(), number: number.trim() };\n\n    submitHandler(newContact);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"name\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleInputChange}\n            required\n          />\n        </label>\n        <button type=\"submit\" className={styles.btn}>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  submitHandler: contact => dispatch(addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","// Imports from React\nimport React from 'react';\n// Imports from Redux\nimport { connect } from 'react-redux';\nimport { updateFilter } from '../../redux/contacts-actions';\nimport { getFilterValue } from '../../redux/contacts-selectors';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './Filter.module.css';\n\nconst Filter = ({ filterValue, filterUpdate }) => {\n  return (\n    <div className={styles.filter}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={filterUpdate}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.defaultProps = {\n  filterValue: '',\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  filterUpdate: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filterValue: getFilterValue(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filterUpdate: event => dispatch(updateFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// Imports from React\nimport React, { Component } from 'react';\n// Imports from Redux\nimport { connect } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/contacts-operations';\nimport { getFilteredItems, getLoading } from '../../redux/contacts-selectors';\n// Imports of helpers\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n// Styles imports\nimport styles from './ContactList.module.css';\n\nclass ContactList extends Component {\n  static propTypes = {\n    filtered: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { filtered, onDeleteContact, isLoading } = this.props;\n    const loaderConfig = {\n      type: 'TailSpin',\n      color: '#80cbc4',\n      height: 50,\n      width: 50,\n      className: styles.loader,\n    };\n\n    return (\n      <>\n        {isLoading && <Loader {...loaderConfig} />}\n\n        {!_.isEmpty(filtered) && (\n          <ul className={styles.contacts}>\n            {filtered.map(({ id, name, number }) => (\n              <li key={id} className={styles.item}>\n                <div>\n                  <p>{name}:</p>\n                  <p>{number}</p>\n                </div>\n\n                <button\n                  className={styles.btn}\n                  onClick={() => {\n                    onDeleteContact(id);\n                  }}\n                >\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        {_.isEmpty(filtered) && !isLoading && (\n          <p className={styles.notification}>No contact found.</p>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  filtered: getFilteredItems(state),\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId => dispatch(deleteContact(contactId)),\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// Imports from React\nimport React from 'react';\n// Imports of components\nimport Section from './components/Section';\nimport PageTitle from './components/PageTitle';\nimport Title from './components/Title';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => {\n  return (\n    <>\n      <PageTitle title=\"Phone Book\" />\n      <Section>\n        <Title title=\"Add contacts\" />\n        <ContactForm />\n        <Title title=\"Сontacts\" />\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","// Imports from React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Imports from Redux\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { store, persistor } from './redux/store';\n//Imports from Redux Persist\n// import { PersistGate } from 'redux-persist/integration/react';\n// Imports of components\nimport App from './App';\n// Styles imports\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading=\"Loading...\" persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}